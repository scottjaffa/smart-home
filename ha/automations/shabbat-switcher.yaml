blueprint:
  name: Shabbat Switcher
  description: >
    # ðŸ•Ž Shabbat Switcher

    **Version: .1**


    Automation that evaluates conditions and switches HA to Shabbat Mode

    Requires the Jewish Calendar integration

    <details>
    <summary>How it works:</summary>


      - **Trigger:**
        - Going to be lots of description here
    </details>


    Welcome to reach out for questions.


    Required = *
  domain: automation
  input:
    trigger:
      name: "Trigger *"
      icon: mdi:cog-outline
      collapsed: false
      input:
        shabbat_trigger:
          name: Sensor which activates Shabbat/Yom Tov
          description: >
            The sensor which activates this automation, generally from Jewish Calendar
          default: binary_sensor.jewish_calendar_issur_melacha_in_effect
          selector:
            entity:
              filter:
                domain:
                  - binary_sensor
              multiple: false

        disable_trigger:
          name: Shabbat Mode Disable
            description: >
              This prevents the house from going into Shabbat mode
            default: input_boolean.away
            selector:
              entity:
                filter:
                  domain:
                    - binary_sensor
                multiple: true



mode: single

variables:
  shabbat_trigger: !input shabbat_trigger
  disable_trigger: !input disable_trigger

    
triggers:
  - entity_id:
      - !input shabbat_trigger
    to: null
    trigger: state
conditions: []
actions:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{trigger.to_state.state == 'on'}}"
          - condition: state
            entity_id: !input disable_trigger
            state: "off"
            match: any
        sequence:
          - target:
              entity_id: input_boolean.shabbat_active
            data: {}
            action: input_boolean.turn_on
      - conditions:
          - condition: template
            value_template: "{{trigger.to_state.state == 'off'}}"
          - condition: state
            entity_id: input_boolean.shabbat_active
            state: "on"
        sequence:
          - target:
              entity_id: input_boolean.shabbat_active
            data: {}
            action: input_boolean.turn_off
    default: []

    
